stat="identity",
position="dodge")+
theme_classic(base_size=12)+
ylab("Repetition required to meet criterion")+
geom_errorbar( aes(ymin=meanNTC-SEMNTC,
ymax=meanNTC+SEMNTC),
position=position_dodge(width=0.9),
width=.2,
color="black")+
coord_cartesian(ylim=c(0.0, 2.5))
# load libraries and data
library(data.table)
library(dplyr)
library(ggplot2)
library(readxl)
Spano_et_al <- read_excel("Spano et al.xlsx")
#pre-processing for Figure
NumToCriterion<- c(as.numeric(unlist(Spano_et_al[,7])),
as.numeric(unlist(Spano_et_al[,8])),
as.numeric(unlist(Spano_et_al[,9]))
)
Timing<- rep(c("Immediate", "Wake", "Sleep"), each = 49)
Subs <- rep(c(seq(1:49)), 3)
Subs<- as.factor(Subs)
Grouping<-
rep(c("DS"), 25)
Grouping<-
c(Grouping, rep(c("TD"), 24))
Grouping<-
c(rep(Grouping, 3))
FigureItOut <- data.frame(Subs, Grouping, Timing, NumToCriterion)
#pre-processing for ANOVA
ChangeinRec <- c(as.numeric(unlist(Spano_et_al[,11])),
as.numeric(unlist(Spano_et_al[,12])),
as.numeric(unlist(Spano_et_al[,13])),
as.numeric(unlist(Spano_et_al[,14]))
)
Group <-
rep(c("DS"), 25)
Group<-
c(Group, rep(c("TD"), 24))
Group<-
c(rep(Group, 4))
Subjects <- rep(seq(1:49), 4)
Condition <-
rep(rep(c("WAKE", "SLEEP"), each = 49), 2)
Delay <-
rep(c(4, 24), each = 98)
Spano <- data.frame(Subjects, Group, Condition, Delay, ChangeinRec)
#Table of means
overall_means <- FigureItOut %>%
group_by(Grouping, Timing) %>%
summarise(meanNTC = mean(NumToCriterion),
SEMNTC = (sd(NumToCriterion)/sqrt(length(NumToCriterion))))
overall_means<- data.frame(overall_means)
knitr::kable(overall_means)
# make and print the figure
#making the figure
ggplot(overall_means, aes(x=Timing,
y= meanNTC,
group=Grouping,
fill=Grouping))+
geom_bar(
stat="identity",
position="dodge")+
theme_classic(base_size=12)+
ylab("Repetition required to meet criterion")+
geom_errorbar( aes(ymin=meanNTC-SEMNTC,
ymax=meanNTC+SEMNTC),
position=position_dodge(width=0.9),
width=.2,
color="black")+
coord_cartesian(ylim=c(0.0, 2.5))
##ANOVA
Spano$Subjects<- factor(Spano$Subjects)
class(Spano$Subjects)
ANOVA1<- aov(ChangeinRec~Condition + Error(Subjects/(Condition)), Spano)
summary(ANOVA1)
install.packages("pwr")
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message = FALSE, eval = FALSE)
#try again with participant numbers
library(pwr)
effect_sizes<- seq(.1, 2, .1)
powerplay <- sapply( effect_sizes,
FUN = function(x){
pwr.t.test(n=50,
d = x,
sig.level = .05,
type="two.sided")$power    })
#try again with participant numbers
library(pwr)
effect_sizes<- seq(.1, 2, .1)
powerplay <- sapply( effect_sizes,
FUN = function(x){
pwr.t.test(n=50,
d = x,
sig.level = .05,
type = "two.sided",                             alternative="two.sided")$power    })
#try again with participant numbers
library(pwr)
effect_sizes<- seq(.1, 2, .1)
powerplay <- sapply( effect_sizes,
FUN = function(x){
pwr.t.test(n=50,
d = x,
sig.level = .05,
type = "two.sample",                             alternative="two.sided")$power    })
plotter <- data.frame(effect_sizes, powerplay)
library(ggplot2)
ggplot(plotter, aes(x = effect_sizes,
y = power))+
geom_point() +
geom_line()
#try again with participant numbers
library(pwr)
effect_sizes<- seq(.1, 2, .1)
powerplay <- sapply( effect_sizes,
FUN = function(x){
pwr.t.test(n=50,
d = x,
sig.level = .05,
type = "two.sample",                             alternative="two.sided")$power    })
plotter <- data.frame(effect_sizes, powerplay)
library(ggplot2)
ggplot(plotter, aes(x = effect_sizes,
y = powerplay))+
geom_point() +
geom_line()
num_subjects <- seq(10, 100, 10)
power <- sapply(num_subjects,
FUN = function(x) {
pwr.t.test(n = x,
d = .2,
sig.level = .05,
type = "two.sample",
alternative = "two.sided")$power      })
plotspot <- data.frame(num_subjects, power)
library (ggplot2)
ggplot(plotspot, aes(x = num_subjects,
y = power))+
geom_point() +
geom_line()
num_subjects <- seq(10, 1000, 10)
power <- sapply(num_subjects,
FUN = function(x) {
pwr.t.test(n = x,
d = .2,
sig.level = .05,
type = "two.sample",
alternative = "two.sided")$power      })
plotspot <- data.frame(num_subjects, power)
library (ggplot2)
ggplot(plotspot, aes(x = num_subjects,
y = power))+
geom_point() +
geom_line()
#try again with pwr package and n=50
library(pwr)
effect_sizes<- seq(.1, 2, .1)
powerplay <- sapply( effect_sizes,
FUN = function(x){
pwr.t.test(n=50,
d = x,
sig.level = .05,
type = "one.sample",                             alternative="two.sided")$power    })
plotter <- data.frame(effect_sizes, powerplay)
library(ggplot2)
ggplot(plotter, aes(x = effect_sizes,
y = powerplay))+
geom_point() +
geom_line()
simple_sim <- function(x){
sleepers <- rnorm(n = 50, mean = -0.25, sd = 0.2)
wakers <- rnorm (n = 50, mean = -0.3, sd = 0.2)
simplescores <- c(sleepers, wakers)
simplecond <- rep(c("SLEEP", "WAKE"), each = 50)
simplesubs<-as.factor(seq(1:50))
simple<- data.frame(simplesubs, sleepers, wakers)
return(t.test(sleepers, wakers, var.equal = TRUE)$p.value)
}
#new simulating function
simple_sim <- function(x){
sleepers <- rnorm(n = 50, mean = -0.25, sd = 0.2)
wakers <- rnorm (n = 50, mean = -0.3, sd = 0.2)
simplescores <- c(sleepers, wakers)
simplecond <- rep(c("SLEEP", "WAKE"), each = 50)
simplesubs<-as.factor(seq(1:50))
simple<- data.frame(simplesubs, sleepers, wakers)
return(t.test(sleepers, wakers, var.equal = TRUE)$p.value)
}
#Repeat and save p values
for (i in 1:10000){
superpowers[i] <- simple_sim(i)
}
superpowers <- c()
for (i in 1:10000){
superpowers[i] <- simple_sim(i)
}
effect_sizes<- seq(.1, 2, .1)
powpow <- sapply(effect_sizes,
FUN = function(x){
simulatedval <- replicate(1000, simple_sim(x))
simulatedpower <- length(simulatedval[simulatedval<.05])/length(simulatedval)
return(simulatedpower)
})
try3 <- data.frame (effect_sizes, powpow)
ggplot(try3, aes(x = effect_sizes
y = powpow)) +
ggplot(try3, aes(x = effect_sizes,
y = powpow)) +
geom_point() +
geom_line()
powpow
effect_sizes
powpow <- sapply(effect_sizes,
FUN = function(x){
simulatedval <- replicate(1000, simple_sim(x))
}
powder<- sapply(effect_sizes,
effect_sizes<- seq(.1, 2, .1)
powder<- sapply(effect_sizes,
FUN = function(X){
simulatedval <- replicate(1000, simple_sim(x))})
View(Spano)
View(powder)
powder<- sapply(effect_sizes,
FUN = function(X){
simulatedval <- replicate(1000, simple_sim(x))
simpowder <- length(simulatedval[simulatedval<.05])/
length(simulatedval)
return(simpowder)
})
tryit <- data.frame(effect_sizes, powder)
powder<- sapply(effect_sizes,
FUN = function(X){
simulatedval <- replicate(1000, simple_sim(x))
simpowder <- length(simulatedval[simulatedval<.05])/
length(simulatedval)
return(simpowder)
})
simpowder <- length(simulatedval[simulatedval<.05])/
length(simulatedval)
powder<- sapply(effect_sizes,
FUN = function(X){
simulatedval <- replicate(1000, simple_sim(x))
simulatedval<- c()
powder<- sapply(effect_sizes,
FUN = function(X){
simulatedval <- replicate(1000, simple_sim(x))
simulatedval <- replicate(1000, simple_sim(x))
simulatedval <- replicate(1000, simple_sim(x))
#try a simpler version
#ignore the between sub factor. now it is a within sub design and use the total N . hold N constant (50)
#new simulating function
simple_sim <- function(x){
sleepers <- rnorm(n = 50, mean = -0.25, sd = 0.2)
wakers <- rnorm (n = 50, mean = -0.3, sd = 0.2)
simplescores <- c(sleepers, wakers)
simplecond <- rep(c("SLEEP", "WAKE"), each = 50)
simplesubs<-as.factor(seq(1:50))
simple<- data.frame(simplesubs, sleepers, wakers)
return(t.test(sleepers, wakers, var.equal = TRUE)$p.value)
}
#Repeat and save p values
superpowers <- c()
for (i in 1:10000){
superpowers[i] <- simple_sim(i)
}
#vector of effect sizes
effect_sizes<- seq(.1, 2, .1)
powder<- sapply(effect_sizes,
FUN = function(X){
simulatedval <- replicate(1000, simple_sim(x))
simpowder <- length(simulatedval[simulatedval<.05])/
length(simulatedval)
return()
})
powpow <- sapply(effect_sizes,
FUN = function(x){
simulatedval <- replicate(1000, simple_sim(x))
simulatedpower <- length(simulatedval[simulatedval<.05])/length(simulatedval)
return(simulatedpower)
})
try3 <- data.frame (effect_sizes, powpow)
ggplot(try3, aes(x = effect_sizes,
y = powpow)) +
geom_point() +
geom_line()
#try a simpler version
#ignore the between sub factor. now it is a within sub design and use the total N . hold N constant (50)
#new simulating function
simple_sim <- function(x){
sleepers <- rnorm(n = 50, mean = -0.25, sd = 0.2)
wakers <- rnorm (n = 50, mean = -0.3, sd = 0.2)
simplescores <- c(sleepers, wakers)
simplecond <- rep(c("SLEEP", "WAKE"), each = 50)
simplesubs<-as.factor(seq(1:50))
simple<- data.frame(simplesubs, sleepers, wakers)
return(t.test(sleepers, wakers, var.equal = TRUE)$p.value)
}
#Repeat and save p values
superpowers <- c()
for (i in 1:10000){
superpowers[i] <- simple_sim(i)
}
#vector of effect sizes
effect_sizes<- seq(.1, 2, .1)
powder<- sapply(effect_sizes,
FUN = function(X){
simulatedval <- replicate(1000, simple_sim(x))
powder<- sapply(effect_sizes,
FUN = function(X){
simulatedval <- replicate(1000, simple_sim(x))
}
powder<- sapply(effect_sizes,
powder<- sapply(effect_sizes,
FUN = function(X){
simulatedval <- replicate(1000, simple_sim(x))})
View(powder)
simulatedpower <- length(simulatedval[simulatedval<.05])/length(simulatedval)
simulatedpower <- length(powder[powder<.05])/length(powder)
simulatedpower
powder<- sapply(effect_sizes,
FUN = function(X){
simulatedval <- replicate(1000, simple_sim(x))
simulatedpower <- length(simulatedval[simulatedval<.05])/length(simulatedval)
})
powder<- sapply(effect_sizes,
FUN = function(X){
simulatedval <- replicate(1000, simple_sim(x)) })
try3 <- data.frame (effect_sizes, powder)
ggplot(try3, aes(x = effect_sizes,
y = powder)) +
geom_point() +
geom_line()
try3 <- data.frame (effect_sizes, powder)
ggplot(try3, aes(x = effect_sizes,
y = powder)) +
geom_point() +
geom_line()
sig <- length(powder[powder <.05])/length(powder)
sim_power <- function(x){
TDsleep <- rnorm(n = 25, mean=-0.1, sd = 0.2)
DSsleep <- rnorm(n = 25, mean=-0.5, sd = 0.2)
TDwake <- rnorm(n = 25, mean=-0.4, sd = 0.2)
DSwake <- rnorm(n = 25, mean=-0.2, sd = 0.2)
scores <- c(TDsleep, TDwake,DSsleep, DSwake )
cond<- rep(rep(c("SLEEP", "WAKE"), each = 25), 4)
gru<- rep(rep(c("TD", "DS"), each = 50), 2)
subs<-as.factor(rep(seq(1:50), 2))
DF<- data.frame(subs, scores, cond, gru)
novaresults<- summary(aov(scores~gru*cond + Error(subs/(cond)), DF) )
# novaresults<-str(novaresults)
return(novaresults$`Error: Within`[[1]]$`Pr(>F)`[1])
}
#Repeat and save p values
for (i in 1:10000){
powersim[i] <- sim_power(i)
}
power <- sapply(effect_sizes,
FUN = function (x){
sims <- replicate(10000, simple_sim(x))
sim_power_ttest <-
length(sims[sims<.05])/length(sims)
return (sim_power_ttest)
})
plot_df <- data.frame(effect_sizes, power)
ggplot(plot_df, aes (x=effect_sizes,
y=power))+
geom_point()+
geom_line()
#try a simpler version
#ignore the between sub factor. now it is a within sub design and use the total N . hold N constant (50)
#new simulating function
simple_sim <- function(x){
sleepers <- rnorm(n = 50, mean = -0.25, sd = 0.2)
wakers <- rnorm (n = 50, mean = -0.3, sd = 0.2)
simplescores <- c(sleepers, wakers)
simplecond <- rep(c("SLEEP", "WAKE"), each = 50)
simplesubs<-as.factor(seq(1:50))
simple<- data.frame(simplesubs, sleepers, wakers)
return(t.test(sleepers, wakers, var.equal = TRUE)$p.value)
}
#Repeat and save p values
superpowers <- c()
for (i in 1:10000){
superpowers[i] <- simple_sim(i)
}
#vector of effect sizes
effect_sizes<- seq(.1, 2, .1)
powder<- sapply(effect_sizes,
FUN = function(X){
simulatedval <- replicate(1000, simple_sim(x)) })
#the problem is that it keeps collapsing across all of the effect sizes instead of keeping them seperate.
simulatedpower <- length(simulatedval[simulatedval<.05])/length(simulatedval)
library("papaja")
#power analysis
#Set the properties of each sample including N, mean, SD, kind of distribution
meanSD <- TwentyFourHrDelay %>%
group_by(GroupPerHr, CondPerHr) %>%
summarise (means = mean(Change24hr),
stdevs = sd(Change24hr))
library("dplyr", lib.loc="~/R/win-library/3.5")
#power analysis
#Set the properties of each sample including N, mean, SD, kind of distribution
meanSD <- TwentyFourHrDelay %>%
group_by(GroupPerHr, CondPerHr) %>%
summarise (means = mean(Change24hr),
stdevs = sd(Change24hr))
Change4hr <- ChangeinRec[1:98]
Change24hr <- ChangeinRec[99:196]
GroupPerHr <- Group[1:98]
CondPerHr <- Condition[1:98]
TwentyFourHrDelay<- data.frame(Subjects,GroupPerHr, CondPerHr, Change24hr)
FourHrDelay <- data.frame(Subjects,GroupPerHr, CondPerHr, Change4hr)
ANOVA24<- aov(Change24hr~GroupPerHr*CondPerHr + Error(Subjects/(CondPerHr)), TwentyFourHrDelay)
summary(ANOVA24)
ANOVA4 <-  aov(Change4hr~GroupPerHr*CondPerHr + Error(Subjects/(CondPerHr)), FourHrDelay)
summary(ANOVA4)
apa_anova4 <- apa_print(summary(ANOVA4))
apa_table(
apa_anova4$table
, caption = "ANOVA table for 4 hour delay"
)
apa_anova24 <- apa_print(summary(ANOVA24))
apa_table(
apa_anova24$table
, caption = "ANOVA table for 24 hour delay"
)
#power analysis
#Set the properties of each sample including N, mean, SD, kind of distribution
meanSD <- TwentyFourHrDelay %>%
group_by(GroupPerHr, CondPerHr) %>%
summarise (means = mean(Change24hr),
stdevs = sd(Change24hr))
#Analyze simulated data to obtain a p value
sim_power <- function(x){
TDsleep <- rnorm(n = 25, mean=-0.1, sd = 0.2)
DSsleep <- rnorm(n = 25, mean=-0.5, sd = 0.2)
TDwake <- rnorm(n = 25, mean=-0.4, sd = 0.2)
DSwake <- rnorm(n = 25, mean=-0.2, sd = 0.2)
scores <- c(TDsleep, TDwake,DSsleep, DSwake )
cond<- rep(rep(c("SLEEP", "WAKE"), each = 25), 4)
gru<- rep(rep(c("TD", "DS"), each = 50), 2)
subs<-as.factor(rep(seq(1:50), 2))
DF<- data.frame(subs, scores, cond, gru)
novaresults<- summary(aov(scores~gru*cond + Error(subs/(cond)), DF) )
# novaresults<-str(novaresults)
return(novaresults$`Error: Within`[[1]]$`Pr(>F)`[1])
}
#Repeat and save p values
for (i in 1:10000){
powersim[i] <- sim_power(i)
}
#Repeat and save p values
powersim<- c()
for (i in 1:10000){
powersim[i] <- sim_power(i)
}
#power analysis
#Set the properties of each sample including N, mean, SD, kind of distribution
meanSD <- TwentyFourHrDelay %>%
group_by(GroupPerHr, CondPerHr) %>%
summarise (means = mean(Change24hr),
stdevs = sd(Change24hr))
#Analyze simulated data to obtain a p value
sim_power <- function(x){
TDsleep <- rnorm(n = 25, mean=-0.1, sd = 0.2)
DSsleep <- rnorm(n = 25, mean=-0.5, sd = 0.2)
TDwake <- rnorm(n = 25, mean=-0.4, sd = 0.2)
DSwake <- rnorm(n = 25, mean=-0.2, sd = 0.2)
scores <- c(TDsleep, TDwake,DSsleep, DSwake )
cond<- rep(rep(c("SLEEP", "WAKE"), each = 25), 4)
gru<- rep(rep(c("TD", "DS"), each = 50), 2)
subs<-as.factor(rep(seq(1:50), 2))
DF<- data.frame(subs, scores, cond, gru)
novaresults<- summary(aov(scores~gru*cond + Error(subs/(cond)), DF) )
# novaresults<-str(novaresults)
return(novaresults$`Error: Within`[[1]]$`Pr(>F)`[1])
}
#vector of effect sizes
effect_sizes<- seq(.1, 2, .1)
#run sim for each effect size 100 times
power <- sapply(effect_sizes,
FUN = function (x){
sims <- replicate(10000, simple_sim(x))
sim_power_ttest <-
length(sims[sims<.05])/length(sims)
return (sim_power_ttest)
})
plot_df <- data.frame(effect_sizes, power)
#i'll plot the power
library(ggplot2)
ggplot(plot_df, aes (x=effect_sizes,
y=power))+
geom_point()+
geom_line()
#try again with pwr package and n=50
library(pwr)
effect_sizes<- seq(.1, 2, .1)
powerplay <- sapply( effect_sizes,
FUN = function(x){
pwr.t.test(n=50,
d = x,
sig.level = .05,
type = "one.sample",                             alternative="two.sided")$power    })
plotter <- data.frame(effect_sizes, powerplay)
library(ggplot2)
ggplot(plotter, aes(x = effect_sizes,
y = powerplay))+
geom_point() +
geom_line()
